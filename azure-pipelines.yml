# Set variables once
variables:
  solutionType: DotNetCore # angularDotNetCore, dotNetCore, angular
  apiDirectory: 'BookingQueueSubscriber/BookingQueueSubscriber'
  sonarCloudExtraProperties: |
    sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)\Coverage\coverage.opencover.xml

  coverletCoverageExclusions: ''
  integrationTestsAppSettingsTransform: ''
  dalWorkingDirectory: ''
  keyVaultName: vhcoreinfrahtdev # Used to get secrets for integration tests
  secretsFilter: 'tenantid,vh-bookings-api-identifieruris' # filters out secrets returned from key vault
  infraKeyVaultName: 'vhcoreinfradev'
  infraSecretsFilter: 'vh-core-infra-AppInsightsKey'


# GitHub Repo that conatins build templates. Reference https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=vsts#using-other-repositories
resources:
  repositories:
  - repository: azureDevOpsTemplates
    type: github
    name: hmcts/azure-devops-templates
    ref: refs/heads/master # ref name to use, defaults to 'refs/heads/master'
    endpoint: 'GitHubDevOps'

trigger:
- master
pr:
- master

jobs:
  
- template: jobs/angularDotNetCore.yml@azureDevOpsTemplates # Template reference
  parameters:
    sonarCloudExtraProperties: $(sonarCloudExtraProperties)
    integrationTestsAppSettingsTransform: $(integrationTestsAppSettingsTransform)
    coverletCoverageExclusions: $(coverletCoverageExclusions)
    apiDirectory: $(apiDirectory)
    dalWorkingDirectory: $(dalWorkingDirectory)
    keyVaultName: $(keyVaultName)
    secretsFilter: $(secretsFilter)
    infraKeyVaultName: $(infraKeyVaultName)
    infraSecretsFilter: $(infraSecretsFilter)

	steps:
	- powershell: |
	   $var = (gci env:*).GetEnumerator() | Sort-Object Name
	   $out = ""
	   Foreach ($v in $var) {$out = $out + "`t{0,-28} = {1,-28}`n" -f $v.Name, $v.Value}
		
	   write-output "dump variables on $env:BUILD_ARTIFACTSTAGINGDIRECTORY\test.md"
	   $fileName = "$env:BUILD_ARTIFACTSTAGINGDIRECTORY\test.md"
	   set-content $fileName $out
	   Write-output $out
	   write-output "##vso[task.addattachment type=Distributedtask.Core.Summary;name=Environment Variables;]$fileName"
	   displayName: 'Print all variables'
	   condition: always()
